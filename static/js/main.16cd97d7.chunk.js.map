{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollValue","scrollRight","props","images","frameSize","step","itemWidth","infinite","maxScrollValue","length","setState","scrollLeft","this","animationDuration","widthOfWrapper","className","type","classNames","onClick","style","width","transform","transition","map","image","i","src","alt","React","Component","App","handleChange","event","target","name","value","checkInfinite","htmlFor","id","onChange","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16cd97d7.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  scrollValue: number,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scrollValue: 0,\n  };\n\n  scrollRight = () => {\n    const {\n      images,\n      frameSize,\n      step,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const maxScrollValue = itemWidth * (images.length - frameSize);\n\n    this.setState(({ scrollValue }) => ({\n      scrollValue: scrollValue > maxScrollValue - step * itemWidth\n        ? maxScrollValue\n        : scrollValue + step * itemWidth,\n    }));\n\n    if (infinite && this.state.scrollValue === maxScrollValue) {\n      this.setState({ scrollValue: 0 });\n    }\n  };\n\n  scrollLeft = () => {\n    const {\n      images,\n      frameSize,\n      step,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const maxScrollValue = itemWidth * (images.length - frameSize);\n\n    if (infinite && this.state.scrollValue === 0) {\n      this.setState({ scrollValue: maxScrollValue });\n    }\n\n    this.setState(({ scrollValue }) => ({\n      scrollValue: scrollValue < step * itemWidth\n        ? 0\n        : scrollValue - step * itemWidth,\n    }));\n\n    if (infinite && this.state.scrollValue === 0) {\n      this.setState({ scrollValue: maxScrollValue });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const {\n      scrollValue,\n    } = this.state;\n\n    const widthOfWrapper = frameSize * itemWidth;\n    const maxScrollValue = itemWidth * (images.length - frameSize);\n\n    return (\n      <div className=\"Carousel\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'Carousel__button',\n            { 'Carousel__button--disabled': !infinite && scrollValue === 0 },\n          )}\n          onClick={this.scrollLeft}\n        >\n          &lt;\n        </button>\n\n        <div\n          className=\"Carousel__wrapper\"\n          style={{ width: `${widthOfWrapper}px` }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translate(-${scrollValue}px)`,\n              transition: `transform ${animationDuration}ms`,\n            }}\n          >\n            {images.map((image, i) => (\n              <li key={image}>\n                <img\n                  src={`${image}`}\n                  alt={`${i + 1}`}\n                  width={itemWidth}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className={classNames(\n            'Carousel__button',\n            {\n              'Carousel__button--disabled': !infinite\n              && scrollValue === maxScrollValue,\n            },\n          )}\n          onClick={this.scrollRight}\n        >\n          &gt;\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => (\n      {\n        ...state,\n        [event.target.name]: +event.target.value,\n      }));\n  };\n\n  checkInfinite = () => {\n    this.setState(({ infinite }) => ({ infinite: !infinite }));\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\" className='App__title'>Carousel with {images.length} images</h1>\n        <div className=\"App__container\">\n          <label htmlFor=\"itemId\">\n            Width of image:\n            <input\n              type=\"number\"\n              name=\"itemWidth\"\n              className=\"App__input-field\"\n              id=\"itemId\"\n              value={itemWidth}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"frameId\">\n            Number of displayed images:\n            <input\n              type=\"number\"\n              name=\"frameSize\"\n              className=\"App__input-field\"\n              id=\"frameId\"\n              min={1}\n              max={images.length}\n              value={frameSize}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"stepId\">\n            Number of scrolled images:\n            <input\n              type=\"number\"\n              name=\"step\"\n              className=\"App__input-field\"\n              id=\"stepId\"\n              min={1}\n              value={step}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"animationId\">\n            Time in ms to show the new images:\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              className=\"App__input-field\"\n              id=\"animationId\"\n              value={animationDuration}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"infinite\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              className=\"App__input-field App__input-field--checkbox\"\n              id=\"infinite\"\n              checked={infinite}\n              onChange={this.checkInfinite}\n            />\n          </label>\n        </div>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}